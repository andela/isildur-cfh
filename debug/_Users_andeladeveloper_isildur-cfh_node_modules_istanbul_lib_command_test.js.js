
// Instrumentation Header
{
    var fs = require('fs');
    var __statement_chRfxK, __expression_EAm7zz, __block_$hHVwQ;
    var store = require('/Users/andeladeveloper/isildur-cfh/node_modules/gulp-coverage/contrib/coverage_store.js');
    
    __statement_chRfxK = function(i) {
        var fd = store.register('/Users/andeladeveloper/isildur-cfh/node_modules/istanbul/lib/command/test.js');
        fs.writeSync(fd, '{"statement": {"node": ' + i + '}},\n');
    }; 
    
    __expression_EAm7zz = function(i) {
        var fd = store.register('/Users/andeladeveloper/isildur-cfh/node_modules/istanbul/lib/command/test.js');
        fs.writeSync(fd, '{"expression": {"node": ' + i + '}},\n');
    }; 
    
    __block_$hHVwQ = function(i) {
        var fd = store.register('/Users/andeladeveloper/isildur-cfh/node_modules/istanbul/lib/command/test.js');
        fs.writeSync(fd, '{"block": ' + i + '},\n');
    }; 
    __intro_wb1vlw = function(id, obj) {
        // console.log('__intro: ', id, ', obj.__instrumented_miss: ', obj.__instrumented_miss, ', obj.length: ', obj.length);
        (typeof obj === 'object' || typeof obj === 'function') &&
            Object.defineProperty && Object.defineProperty(obj, '__instrumented_miss', {enumerable: false, writable: true});
        obj.__instrumented_miss = obj.__instrumented_miss || [];
        if ('undefined' !== typeof obj && null !== obj && 'undefined' !== typeof obj.__instrumented_miss) {
            if (obj.length === 0) {
                // console.log('interim miss: ', id);
                obj.__instrumented_miss[id] = true;
            } else {
                obj.__instrumented_miss[id] = false;
            }
        }
        return obj;
    };
    function isProbablyChainable(obj, id) {
        return obj &&
            obj.__instrumented_miss[id] !== undefined &&
            'number' === typeof obj.length;
    }
    __extro_AHsMH1 = function(id, obj) {
        var fd = store.register('/Users/andeladeveloper/isildur-cfh/node_modules/istanbul/lib/command/test.js');
        // console.log('__extro: ', id, ', obj.__instrumented_miss: ', obj.__instrumented_miss, ', obj.length: ', obj.length);
        if ('undefined' !== typeof obj && null !== obj && 'undefined' !== typeof obj.__instrumented_miss) {
            if (isProbablyChainable(obj, id) && obj.length === 0 && obj.__instrumented_miss[id]) {
                // if the call was not a "constructor" - i.e. it did not add things to the chainable
                // and it did not return anything from the chainable, it is a miss
                // console.log('miss: ', id);
            } else {
                fs.writeSync(fd, '{"chain": {"node": ' + id + '}},\n');
            }
            obj.__instrumented_miss[id] = undefined;
        } else {
            fs.writeSync(fd, '{"chain": {"node": ' + id + '}},\n');
        }
        return obj;
    };
};
////////////////////////

// Instrumented Code
{
    __statement_chRfxK(0);
    var runWithCover = (__expression_EAm7zz(1), require('./common/run-with-cover')), util = (__expression_EAm7zz(2), require('util')), Command = (__expression_EAm7zz(3), require('./index'));
}
function TestCommand() {
    __block_$hHVwQ(0);
    {
        __statement_chRfxK(4);
        __extro_AHsMH1(5, __intro_wb1vlw(5, Command).call(this));
    }
}
{
    __statement_chRfxK(6);
    TestCommand.TYPE = 'test';
}
{
    __statement_chRfxK(7);
    __extro_AHsMH1(8, __intro_wb1vlw(8, util).inherits(TestCommand, Command));
}
{
    __statement_chRfxK(9);
    __extro_AHsMH1(10, __intro_wb1vlw(10, Command).mix(TestCommand, {
        synopsis: function () {
            __block_$hHVwQ(1);
            return __expression_EAm7zz(11), 'cover a node command only when npm_config_coverage is set. Use in an `npm test` script for conditional coverage';
        },
        usage: function () {
            __block_$hHVwQ(2);
            {
                __statement_chRfxK(12);
                __extro_AHsMH1(13, __intro_wb1vlw(13, runWithCover).usage(__extro_AHsMH1(14, __intro_wb1vlw(14, this).toolName()), __extro_AHsMH1(15, __intro_wb1vlw(15, this).type())));
            }
        },
        run: function (args, callback) {
            __block_$hHVwQ(3);
            {
                __statement_chRfxK(16);
                __extro_AHsMH1(17, __intro_wb1vlw(17, runWithCover).run(args, __extro_AHsMH1(18, __intro_wb1vlw(18, this).type()), (__expression_EAm7zz(19), !(__expression_EAm7zz(20), !process.env.npm_config_coverage)), callback));
            }
        }
    }));
}
{
    __statement_chRfxK(21);
    module.exports = TestCommand;
}